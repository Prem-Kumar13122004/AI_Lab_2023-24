Ex.No: 13 Learning â€“ Use Supervised Learning (Miniproject)
DATE: 4.11.2024
REGISTER NUMBER: 212222040106
AIM:
To write a program to train the classifier for Student Exam Performance Prediction.

Algorithm:
Step 1 : Start the program.
Step 2 : Import the necessary packages, such as NumPy, Pandas, Matplotlib, and Seaborn.
Step 3 : Install and import Gradio for creating the user interface.
Step 4 : Load the student performance dataset using Pandas.
Step 5 : Perform exploratory data analysis (EDA) and visualize the data (optional).
Step 6 : Check for missing values and handle them if necessary.
Step 7 : Encode categorical features using LabelEncoder or OneHotEncoder.
Step 8 : Split the dataset into input features (X) and target labels (y).
Step 9 : Split the data into training and testing sets using train_test_split.
Step 10 : Standardize the training and testing data using StandardScaler.
Step 11 : Instantiate the MLPClassifier model with 1000 iterations and train the model on the training data.
Step 12 : Print the model's accuracy on both the training and testing sets.
Step 13 : Create a Gradio interface to take input values for student features and predict the exam performance using the trained model.
Step 14 : Launch the Gradio interface for user interaction.
Step 15 : Stop the program.

Program:
python
Copy code
import numpy as np  # linear algebra
import pandas as pd  # data processing, CSV file I/O (e.g. pd.read_csv)

# Loading dataset
data = pd.read_csv('/content/sample_data/student_exam_data.csv')

# Displaying dataset information
data.head()
data.dtypes
data.shape
data.columns

# Splitting the data into features and target
X = data.drop(['Pass/Fail'], axis=1)
y = data['Pass/Fail']

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardizing the data
scale = MinMaxScaler()
X_train_scale = scale.fit_transform(X_train)
X_test_scale = scale.transform(X_test)

# Initializing and training the model
model = RandomForestClassifier()
model.fit(X_train_scale, y_train)

# Making predictions
y_pred = model.predict(X_test_scale)

# Calculating accuracy
print("Accuracy:", accuracy_score(y_test, y_pred))
Output:




Result:
Thus the system was trained successfully and the prediction was carried out.
